import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { autheticateUser } from './authAPI'

const initialState = {
  isLoggedIn: false,
  isLoading: false,
}

export const authUser = createAsyncThunk('login/authUser', async user => {
  try {
    const res = await autheticateUser(user)
    alert(res.message)
    return res.data.isAuth
  } catch (error) {
    alert(error.message)
    return false
  }
})

export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logOut: state => {
      state.isLoggedIn = false
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(authUser.pending, state => {
        state.isLoading = true
      })
      .addCase(authUser.fulfilled, (state, action) => {
        state.isLoading = false
        state.isLoggedIn = action.payload
      })
  },
})

export const { logOut, logIn } = loginSlice.actions

export const getLoggedIn = state => state.login.isLoggedIn
export const getAuthLoading = state => state.login.isLoading

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default loginSlice.reducer
